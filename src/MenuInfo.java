
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.JFrame;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * @author dambarpun
 */
public class MenuInfo extends javax.swing.JFrame {

    /**
     * Creates new form MenuInfo
     */
    static int rowLast = 0;
    static boolean wasWrong = false;
    public MenuInfo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        dishNoTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        dishNameTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lowRB = new javax.swing.JRadioButton();
        mediumRB = new javax.swing.JRadioButton();
        highRB = new javax.swing.JRadioButton();
        priceTxt = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        categoryCB = new javax.swing.JComboBox<>();
        btnDelete = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        combo1 = new javax.swing.JComboBox<>();
        categoryRB = new javax.swing.JRadioButton();
        priceRB = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuInfoMenu = new javax.swing.JMenu();
        menuInfoNew = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        menuInfoContactUs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuInfoQuit = new javax.swing.JMenuItem();
        windowMenu = new javax.swing.JMenu();
        windowsMinimize = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        windowMaximize = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        windowRestore = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpFAQ = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 14))); // NOI18N

        dishNoTxt.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        dishNoTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dishNoTxtActionPerformed(evt);
            }
        });
        dishNoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dishNoTxtKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel1.setText("Dish No");

        dishNameTxt.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        dishNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dishNameTxtActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel2.setText("Name");

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel3.setText("Range Level(Spiciness)");

        buttonGroup1.add(lowRB);
        lowRB.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        lowRB.setSelected(true);
        lowRB.setText("Low");
        lowRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowRBActionPerformed(evt);
            }
        });

        buttonGroup1.add(mediumRB);
        mediumRB.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        mediumRB.setText("Medium");
        mediumRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediumRBActionPerformed(evt);
            }
        });

        buttonGroup1.add(highRB);
        highRB.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        highRB.setText("High");
        highRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highRBActionPerformed(evt);
            }
        });

        priceTxt.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        priceTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceTxtActionPerformed(evt);
            }
        });
        priceTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                priceTxtKeyTyped(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel4.setText("Price");

        categoryCB.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        categoryCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chicken", "Beef", "Mutton", "Vegetarian", "Pork" }));

        btnDelete.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel5.setText("Category");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(9, 9, 9))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(28, 28, 28)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dishNoTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                            .addComponent(dishNameTxt)
                            .addComponent(priceTxt)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete)
                        .addGap(6, 6, 6)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lowRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(mediumRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(highRB)
                                .addGap(53, 53, 53))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnExit)
                                .addGap(114, 114, 114))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dishNoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dishNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(highRB)
                    .addComponent(mediumRB)
                    .addComponent(lowRB))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoryCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdd)
                            .addComponent(btnDelete)
                            .addComponent(jLabel5))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(btnExit)
                        .addGap(30, 30, 30))))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Menu Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 15))); // NOI18N

        jTable1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", "", "", ""},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Dish No", "Name", "Range Level", "Category", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(100);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(100);
            jTable1.getColumnModel().getColumn(4).setMinWidth(100);
            jTable1.getColumnModel().getColumn(4).setMaxWidth(100);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 14))); // NOI18N

        btnSearch.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtSearch.setText("Price");
        txtSearch.setToolTipText("");
        txtSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSearchMouseClicked(evt);
            }
        });
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel6.setText("Search Criteria");

        combo1.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        combo1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chicken", "Beef", "Mutton", "Vegetarian", "Pork" }));

        buttonGroup2.add(categoryRB);
        categoryRB.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        categoryRB.setSelected(true);
        categoryRB.setText("Category");
        categoryRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryRBActionPerformed(evt);
            }
        });

        buttonGroup2.add(priceRB);
        priceRB.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        priceRB.setText("Price");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(combo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(categoryRB)
                        .addGap(26, 26, 26)
                        .addComponent(priceRB)
                        .addGap(33, 33, 33)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(262, 262, 262)
                        .addComponent(jLabel6)))
                .addContainerGap(9, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch))
                        .addGap(2, 2, 2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(combo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceRB)
                            .addComponent(categoryRB))
                        .addContainerGap())))
        );

        menuInfoMenu.setText("Menu Info");

        menuInfoNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuInfoNew.setIcon(new javax.swing.ImageIcon("/Users/dambarpun/NetBeansProjects/menuIS/icon/file new.png")); // NOI18N
        menuInfoNew.setText("New ");
        menuInfoNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuInfoNewActionPerformed(evt);
            }
        });
        menuInfoMenu.add(menuInfoNew);
        menuInfoMenu.add(jSeparator3);

        menuInfoContactUs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        menuInfoContactUs.setIcon(new javax.swing.ImageIcon("/Users/dambarpun/NetBeansProjects/menuIS/icon/contact.png")); // NOI18N
        menuInfoContactUs.setText("Contact Us");
        menuInfoContactUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuInfoContactUsActionPerformed(evt);
            }
        });
        menuInfoMenu.add(menuInfoContactUs);
        menuInfoMenu.add(jSeparator1);

        menuInfoQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        menuInfoQuit.setIcon(new javax.swing.ImageIcon("/Users/dambarpun/NetBeansProjects/menuIS/icon/close window.png")); // NOI18N
        menuInfoQuit.setText("Quit");
        menuInfoMenu.add(menuInfoQuit);

        jMenuBar1.add(menuInfoMenu);

        windowMenu.setText("Window");

        windowsMinimize.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        windowsMinimize.setIcon(new javax.swing.ImageIcon("/Users/dambarpun/NetBeansProjects/menuIS/icon/minimize window.png")); // NOI18N
        windowsMinimize.setText("Minimize");
        windowsMinimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowsMinimizeActionPerformed(evt);
            }
        });
        windowMenu.add(windowsMinimize);
        windowMenu.add(jSeparator4);

        windowMaximize.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        windowMaximize.setIcon(new javax.swing.ImageIcon("/Users/dambarpun/NetBeansProjects/menuIS/icon/maximize window.png")); // NOI18N
        windowMaximize.setText("Maximize");
        windowMaximize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowMaximizeActionPerformed(evt);
            }
        });
        windowMenu.add(windowMaximize);
        windowMenu.add(jSeparator2);

        windowRestore.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        windowRestore.setIcon(new javax.swing.ImageIcon("/Users/dambarpun/NetBeansProjects/menuIS/icon/restore window.png")); // NOI18N
        windowRestore.setText("Restore");
        windowRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowRestoreActionPerformed(evt);
            }
        });
        windowMenu.add(windowRestore);

        jMenuBar1.add(windowMenu);

        helpMenu.setText("Help");

        helpFAQ.setIcon(new javax.swing.ImageIcon("/Users/dambarpun/NetBeansProjects/menuIS/icon/FAQ.png")); // NOI18N
        helpFAQ.setText("FAQ");
        helpFAQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpFAQActionPerformed(evt);
            }
        });
        helpMenu.add(helpFAQ);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 187, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if(isTableEmpty())  {   //checks if the table is empty before searching
            JOptionPane.showMessageDialog(this,"Sorry, you have not added any item to the table","EMPTY TABLE ERROR",JOptionPane.ERROR_MESSAGE);
        }
        else //enter if the table is not empty
        {
            if(getSearchSelected().equals("Category"))  {   //gets the search criteria to check whether to search by category or price  
                int count=0;    //to count the number of dishes found in the selected category
                String[] dishName;  //to store the name of the dishes
                int index=0;    
                if(isTableEmpty())  {   
                    JOptionPane.showMessageDialog(rootPane, "Sorry. You do not have any dish in the table.","EMPTY TABLE ERROR",JOptionPane.ERROR_MESSAGE);
                }
                else
                {   //count the number of items found in the selected category
                    String cat= combo1.getSelectedItem().toString();
                    
                    for (int i=0; i<jTable1.getRowCount (); i++){
                        String val= (String)jTable1.getValueAt (i, 3);
                        if (cat.equals(val)){
                            count++;
                        }
                    }
                    dishName=new String[count]; //initialising to store the number of dishes found in the selected category
                    for (int i=0; i<jTable1.getRowCount (); i++){
                        String val= (String)jTable1.getValueAt (i, 3);
                        if (cat.equals(val)){
                            dishName[index]=(String)jTable1.getValueAt(i, 1);
                            index++;
                        }
                    }
                    if(count==0)    //if no dishes were found in the selected category
                        JOptionPane.showMessageDialog(rootPane,"You do not have any item in that category "+ "|Invalid Category|");
                    else if (count==1)  //if there is only one dish in the selected category
                        JOptionPane.showMessageDialog(rootPane,"There is only "+count+" "+cat+" dish in the table. The dish name is "+dishName[0]);
                    else    //if there are more than one dish in the selected category
                        JOptionPane.showMessageDialog(rootPane, "There are "+count+" "+cat+" dishes in the table. The dish names are  "+Arrays.toString(dishName));
                }
            }
            else {  //search by price
                if(((String)txtSearch.getText()).equals("") || ((String)txtSearch.getText()).equals("Price"))  {    //checking if the text field of the search text field is empty
                    JOptionPane.showMessageDialog(this,"Sorry!! Before pressing the search button please do enter the price of the item you are searching for ","Empty Search Text Field Error",JOptionPane.ERROR_MESSAGE);
                    txtSearch.setText("");
                    txtSearch.grabFocus();
                }
                else    {   //sorting before performing binary search
                    int small;
                    int[] sortedPrice= new int[rowLast];
                    //creating an array to store the price of items to sort in ascending order before performing binary search
                    for(int i=0; i<rowLast; i++)    {
                        sortedPrice[i]=Integer.parseInt((String)jTable1.getValueAt(i, 4));
                    }
                    for(int i=0; i<rowLast-1; i++)    {
                        small=i;
                        for(int j=i+1; j<rowLast; j++)    {
                           if(sortedPrice[j] < sortedPrice[i])    {
                                small=j;
                           }
                        }
                        if(small!=i)    sortedPrice=swap(sortedPrice,small,i);     //calling swap method to perform swap 
                    }
                    binarySearch(sortedPrice);  //calling binarySearch to perform binary search to the search the item by price
                }
            }
        }    
    }//GEN-LAST:event_btnSearchActionPerformed

    private void highRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highRBActionPerformed
    }//GEN-LAST:event_highRBActionPerformed

    private void priceTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceTxtActionPerformed

    private void dishNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dishNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dishNameTxtActionPerformed

    private void dishNoTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dishNoTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dishNoTxtActionPerformed

    private void mediumRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediumRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mediumRBActionPerformed

    private void lowRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lowRBActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        Border border=BorderFactory.createLineBorder(Color.RED.brighter(), 1,true);
        Color rgb=new Color(153,153,153);
        if(isTableFull())  
        {
           JOptionPane.showMessageDialog(this,"Sorry you cannot add more items to the table.","TABLE OVERFLOW ERROR",JOptionPane.ERROR_MESSAGE); 
        }
        else
        {
            if((dishNoTxt.getText().equals(""))|| (dishNameTxt.getText().equals("")) || (priceTxt.getText().equals(""))) 
            {
                wasWrong = true;
                if(dishNoTxt.getText().equals("")) 
                    dishNoTxt.setBorder(border);
                else
                    dishNoTxt.setBorder(BorderFactory.createLineBorder(rgb,1,true));
                if(dishNameTxt.getText().equals("")) 
                    dishNameTxt.setBorder(border);
                else
                    dishNameTxt.setBorder(BorderFactory.createLineBorder(rgb,1,true));
                if(priceTxt.getText().equals("")) 
                    priceTxt.setBorder(border);
                else
                    priceTxt.setBorder(BorderFactory.createLineBorder(rgb,1,true));
                JOptionPane.showMessageDialog(this,"Please enter the details for the red box","DETAILS ERROR",JOptionPane.ERROR_MESSAGE);
            }
            else if(!(checkForDuplicate())) {  //all the text form is filled
                    insertIntoTable();
                
                    //to change the border of the text box to normal after they were red when they were not filled
                    if(wasWrong)   {
                        dishNoTxt.setBorder(BorderFactory.createLineBorder(rgb,1,true));
                        dishNameTxt.setBorder(BorderFactory.createLineBorder(rgb,1,true));
                        priceTxt.setBorder(BorderFactory.createLineBorder(rgb,1,true));
                        wasWrong=false;
                    }
            }
        }  
    }//GEN-LAST:event_btnAddActionPerformed
/**
 * @return void
 * @param evt 
 */
    private void helpFAQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpFAQActionPerformed
        try {
            File file =new File("/Users/dambarpun/NetBeansProjects/menuIS/FAQpage.pages");
            Desktop.getDesktop().open(file);
        }catch(IOException e)   {
            JOptionPane.showMessageDialog(null,"ERROR");
        }
    }//GEN-LAST:event_helpFAQActionPerformed

    /**
     * to perform the delete action
     * return void
     * @param evt 
     */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if(isTableEmpty())  {   //checking if the table is empty
            JOptionPane.showMessageDialog(this,"You have no item to delete from the table","EMPTY TABLE ERROR",JOptionPane.ERROR_MESSAGE);
        }
        else    {
            rowLast--;  
            deleteFromTable();  //calling deleteFromTable to delete the item from the table if the table is not empty
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    
    private void menuInfoContactUsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuInfoContactUsActionPerformed
       new Contact().setVisible(true);
    }//GEN-LAST:event_menuInfoContactUsActionPerformed

    /**
     * to consume any key typed which is not a digit when entering the price of the dish
     * @param evt 
     */
    private void priceTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceTxtKeyTyped
       char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACKSPACE) || c==KeyEvent.VK_DELETE)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_priceTxtKeyTyped

    /**
     * to consume any key typed which is not a digit when entering the dish no
     * @param evt 
     */
    private void dishNoTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dishNoTxtKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACKSPACE) || c==KeyEvent.VK_DELETE)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_dishNoTxtKeyTyped

    /**
     * to consume any key typed which is not a digit when entering the price of the dish to perform search
     * @param evt 
     */
    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACKSPACE) || c==KeyEvent.VK_DELETE)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtSearchKeyTyped

    /**
     * setting the search text field to "" before entering a new price to search
     * @param evt 
     */
    private void txtSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSearchMouseClicked
        txtSearch.setText("");
    }//GEN-LAST:event_txtSearchMouseClicked

    /**
     * exit the system with a success
     * @param evt 
     */
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        int dialog=JOptionPane.showConfirmDialog(null, "Do you want to close the program");
        if(dialog==JOptionPane.YES_OPTION)
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void categoryRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryRBActionPerformed
    
    /**
     * minimizes the JFrame
     * @param evt 
     */
    private void windowsMinimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowsMinimizeActionPerformed
        this.setExtendedState(JFrame.ICONIFIED);
    }//GEN-LAST:event_windowsMinimizeActionPerformed

    /**
     * maximizes the JFrame
     * @param evt 
     */
    private void windowMaximizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowMaximizeActionPerformed
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }//GEN-LAST:event_windowMaximizeActionPerformed

    /**
     * restores the JFrame to its last normal state
     * @param evt 
     */
    private void windowRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowRestoreActionPerformed
        this.setExtendedState(javax.swing.JFrame.NORMAL);    
    }//GEN-LAST:event_windowRestoreActionPerformed

    /**
     * clearing the table
     * @param evt 
     */
    private void menuInfoNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuInfoNewActionPerformed
        for(int i=0; i<rowLast; i++)    
            for(int j=0; j<jTable1.getColumnCount(); j++)   
                jTable1.setValueAt("",i,j);
         
        rowLast=0;
    }//GEN-LAST:event_menuInfoNewActionPerformed

    
    /**
     * check if the table is full
     * @return boolean
     */
    private boolean isTableFull()    {
        return rowLast==jTable1.getRowCount();
    }
    
    /**
     * checks if the table is empty
     * @return 
     */
    private boolean isTableEmpty()   {
        return rowLast==0;
    }
    
    /**
     * inserting items to the table from the values presented in the JFrame 
     * dishes are added to the bottom of the table 
     * @return void
     */
    private void insertIntoTable()   {
        int numCol = jTable1.getColumnCount();
        for(int col=0; col<numCol; col++)   {
            switch (col) {
                case 0:
                    jTable1.setValueAt(dishNoTxt.getText(), rowLast, col);  //inserting the dishNo to the first column(index 0) of the table 
                    break;
                case 1:
                    jTable1.setValueAt(dishNameTxt.getText(), rowLast, col);    //inserting the dishName to the second column(index 1) of the table
                    break;
                case 2:
                    jTable1.setValueAt(getSelected(), rowLast, col);    //inserting the range level to the third column(index 2v) of the table
                    break;
                case 3:
                     jTable1.setValueAt(categoryCB.getSelectedItem(), rowLast, col);    //inserting the category of the dish to the fourth column(index 3) of the table
                     break;
                 default:
                    jTable1.setValueAt(priceTxt.getText(), rowLast, col);   //inserting the price to the fifth column(index 4) of the table
                    break;
            }
        }
        rowLast++;  
        JOptionPane.showMessageDialog(this,"Your item has been successfully added to the table","Success",JOptionPane.INFORMATION_MESSAGE);
        /*
        resetting the values 
        */
        dishNoTxt.setText("");
        dishNameTxt.setText("");
        priceTxt.setText("");
        categoryCB.setSelectedItem("Chicken");
        lowRB.setSelected(true);
       
    }
    
    /**
     * deleting the last row of the table i.e. by setting the values of the last row to "" to indicate that it is empty
     * @return void
     */
    public void deleteFromTable()   {
        int numCol = jTable1.getColumnCount();
        for(int col=0; col<numCol; col++)   {
              jTable1.setValueAt("", rowLast, col);
        }
    }
    
    /**
     * @return String which is the selected search criteria
     */
    public String getSearchSelected()   {
        if(categoryRB.isSelected())   return "Category";
        else return "Price";
    }
    
    /**
     * @return String which is the selected range level
     */
    public String getSelected() {
        if(lowRB.isSelected())  return "Low";
        else if(mediumRB.isSelected())  return "Medium";
        else return "High";
    }
    
    /**
     * Swap two entries of an array
     * @param a an array
     * @param index1 the first position to swap 
     * @param index2 the second position to swap
     * @return int[]
     */
    public int[] swap(int[] a, int index1, int index2)  {
        int temp=a[index1];
        a[index1]=a[index2];
        a[index2]=temp;
        return a;
    }
    
    /**
     * Performs binary search and displays the result
     * The value to search is taken from the text field
     * @param sortedPrice the array to perform binary search
     */
    public void binarySearch(int[] sortedPrice) {
        boolean found=false;
        int first=0;
        int last=rowLast-1;
        int mid;    //the index to search
        double searchValue=Integer.parseInt((String)txtSearch.getText());
         while(first<=last)   {
                mid=(first+last)/2; //dividing the array
                if(searchValue == sortedPrice[mid]) {   //checks if the value to search is  found at the current position
                    JOptionPane.showMessageDialog(this,"The dish with price "+searchValue+" is  " +jTable1.getModel().getValueAt(mid, 1));
                    found=true;
                    break;
                }
                else if(searchValue > sortedPrice[mid]) //search the upper half
                        first=mid+1;
                else last=mid-1;    //search the lower half
         }
        if(found==false)  JOptionPane.showMessageDialog(this,"Sorry!! You do not have any item with that price ","Empty Search Text Field Error",JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * this method prevent duplication of dish or dish no values when inserting a dish or an item to the table
     * @return true if there is a duplicate dish or dish no
     * @return false if there is no duplicate dish or dish no
     */
    public boolean checkForDuplicate()  {
        for(int i=0; i<rowLast; i++)    {
                if(((String)jTable1.getValueAt(i, 0)).equals(dishNoTxt.getText())) {
                    JOptionPane.showMessageDialog(this, "You have already used "+dishNoTxt.getText()+" as a Dish No. Please use another value","Duplicate Dish No Error",JOptionPane.ERROR_MESSAGE);
                    return true;
                }
                else if( ((String)jTable1.getValueAt(i, 1)).equals(dishNameTxt.getText()) && ((String)jTable1.getValueAt(i, 2)).equals(getSelected()) && ((String)jTable1.getValueAt(i, 3)).equals(categoryCB.getSelectedItem()) && ((String)jTable1.getValueAt(i, 4)).equals(priceTxt.getText()))
                {
                    JOptionPane.showMessageDialog(this, "You already have this dish in the table","Duplicate Dish Error",JOptionPane.ERROR_MESSAGE);
                    return true;
                }
        }
        return false;
    }
    /**
     * @param args the command line arguments
     */
    
public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSearch;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> categoryCB;
    private javax.swing.JRadioButton categoryRB;
    private javax.swing.JComboBox<String> combo1;
    private javax.swing.JTextField dishNameTxt;
    private javax.swing.JTextField dishNoTxt;
    private javax.swing.JMenuItem helpFAQ;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JRadioButton highRB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JTable jTable1;
    private javax.swing.JRadioButton lowRB;
    private javax.swing.JRadioButton mediumRB;
    private javax.swing.JMenuItem menuInfoContactUs;
    private javax.swing.JMenu menuInfoMenu;
    private javax.swing.JMenuItem menuInfoNew;
    private javax.swing.JMenuItem menuInfoQuit;
    javax.swing.JRadioButton priceRB;
    private javax.swing.JTextField priceTxt;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JMenuItem windowMaximize;
    private javax.swing.JMenu windowMenu;
    private javax.swing.JMenuItem windowRestore;
    private javax.swing.JMenuItem windowsMinimize;
    // End of variables declaration//GEN-END:variables
}
